board = [
    [0, 0, 0, 0, 0, 9, 0, 7, 0],
    [0, 0, 0, 0, 8, 2, 0, 5, 0],
    [3, 2, 7, 0, 0, 0, 0, 4, 0],
    [0, 1, 6, 0, 4, 0, 0, 0, 0],
    [0, 5, 0, 0, 0, 0, 3, 0, 0],
    [0, 0, 0, 0, 9, 0, 7, 0, 0],
    [0, 0, 0, 6, 0, 0, 0, 0, 5],
    [8, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 4, 2, 0, 0, 0, 0, 8]
]


class SudokuSolver:
    def __init__(self, board):
        self.board = board

    def print_board(self):
        for row in range(len(self.board)):
            if row % 3 == 0 and row != 0:
                print('---------------------')

            for col in range(len(self.board[0])):
                if col % 3 == 0 and col != 0:
                    print('| ', end='')
                print(board[row][col], '', end='')
            print('')

    def solve(self):
        find = self.find_empty()
        if not find:
            return True
        else:
            row, col = find

        for i in range(1, 10):
            if self.valid(i, (row, col)):
                self.board[row][col] = i

                if self.solve():
                    return True

                self.board[row][col] = 0

        return False

    def find_empty(self):
        for i in range(len(self.board)):
            for j in range(len(self.board[0])):
                if self.board[i][j] == 0:
                    return i, j  # row, col

        return None

    def valid(self, num, pos):
        # Check row
        for i in range(len(self.board[0])):
            if self.board[pos[0]][i] == num and pos[1] != i:
                return False

        # Check column
        for i in range(len(self.board)):
            if self.board[i][pos[1]] == num and pos[0] != i:
                return False

        # Check box
        box_x = pos[1] // 3
        box_y = pos[0] // 3

        for i in range(box_y * 3, box_y * 3 + 3):
            for j in range(box_x * 3, box_x * 3 + 3):
                if board[i][j] == num and (i, j) != pos:
                    return False

        return True


sudoku = SudokuSolver(board)


